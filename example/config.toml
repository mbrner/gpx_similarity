[postgres] # postgres is only used to build up the train dataset
database_name = 'gpx_similarity_png'
# if using docker-compose file
user = 'postgres'
password = 'postgres'
host = 'localhost'
port = '5435'

[redis]
host = 'localhost'
port = '6379'

[map_options]
zoom = 16
width = 256
height = 256
channels = 3
smoothing_dist = 5
show_route = false

[apply]
batch_size = 32
metric = 'cosine' # Check https://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.cdist.html for map_options
aggregation = 'median' # 'mean', 'median', 'trim_mean::<percentage>'

[model]
activation = 'relu'
padding = 'same'
dropout_rate = 0.2
conv_layer_opts = [[32, 8], [16, 4], [8, 2]]
pooling_layer_opts = [4, 4, 2]
mse_loss_factor = 1000


[train]
seed = 1337
batch_size = 32
learning_rate = [-3, -7]
epochs = 20
tensorboard = true
save_type = 'png'
train_test_split = 0.1

[train.filters] # Check https://github.com/juliotrigo/sqlalchemy-filters for filter syntax
    [[train.filters.and]]
        field = 'route_type'
        op = '=='
        value = 'bike'
    [[train.filters.and]]
        [[train.filters.and.or]]
            field = 'dataset'
            op = '=='
            value = 'bikepacking'
        [[train.filters.and.or]]
            field = 'dataset'
            op = '=='
            value = 'geolife'